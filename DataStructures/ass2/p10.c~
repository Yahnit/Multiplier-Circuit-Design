#include<stdio.h>

int a[100001],b[100001],c[100001],x,y,z,s1,s2,s3;

void find_max(int heap[][100],int max,int a,int b)
{
	while (max>=1)
	{
		int parent=(max-1)>>1;
		if (a>=heap[parent][1])
		{
			heap[max][1] = a;
			heap[max][0] = b;
			return;
		}
		heap[max][1] = heap[parent][1];
		heap[max][0] = heap[parent][0];
		max= parent;
	}
	heap[0][1]=a;
	heap[0][0]=b;
}

int main()
{ 
	int t,i;
	scanf("%d",&t);

	while(t--)
	{
		s1=0,s2=0,s3=0;
		scanf("%d",&x);
		for(i=0;i<x;i++)
		{
			scanf("%d",&a[i]);
			s1+=a[i];
		}

		scanf("%d",&y);
		for(i=0;i<y;i++)
		{
			scanf("%d",&b[i]);
			s2+=b[i];
		}
		scanf("%d",&z);
		for(i=0;i<z;i++)
		{
			scanf("%d",&c[i]);
			s3+=c[i];
		}
		while(1)
		{
			if(s3==s2 && s2==s1)
			{
				printf("%d\n",s1);
				break;
			}
			else
			{
				if(s1>=s2 && s1>=s3)
				{
					s1=s1-a[x-1];
					x--;
				}

				else	if(s2>=s1 && s2>=s3)
				{
					s2=s2-b[y-1];
					y--;
				}

				else
				{
					s3=s3-c[z-1];
					z--;
				}
			}

		}
	}

	return 0;

}

int temp[1000000];
void merge(int arr[],int low, int mid, int high) 
{
	int x=low;
	int y=mid+1;
	int i=low;

	while(y<=high && x<=mid) 
	{
		if(arr[x]<=arr[y])
		{
			temp[i]=arr[x++];
		}
		else
		{
			temp[i]=arr[y++];
		}
		i++;
	}
	while(x<=mid)    
	{
		temp[i++] = arr[x++];
	}
	while(y<=high)   
	{
		temp[i++]=arr[y++];
	}
	for(i=high-1;i>=0;i--)
	{
		arr[i]=temp[i];
	}
}

void sort(int a[],int low, int high)
{
	int mid;
	if(low < high) 
	{
		mid=(low+high)>>1;
		sort(a,low, mid);
		sort(a,mid+1, high);
		merge(a,low, mid, high);
	}
	else  
		return;

}
 
 
