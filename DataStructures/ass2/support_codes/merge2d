void merge(long long int arr[100001][2],long long int low, long long int mid, long long int high)
{
	long long int x=low;
	long long int y=mid+1;
	long long int i=low;

	while(x<=mid && y<=high)
	{
		if(arr[x][0]<=arr[y][0])
		{
			p[i]=arr[x][0];
			q[i++]=arr[x++][1];
		}
		
		else
		{
			p[i]=arr[y][0];
			q[i++]=arr[y++][1];
		}
	}

	while(x<=mid)
	{
		p[i]=arr[x][0];
		q[i++]=arr[x++][1];
	}

	while(y<=high)
	{
		p[i]=arr[y][0];
		q[i++]=arr[y++][1];
	}

	for(i=low;i<=high;i++)
	{
		arr[i][0]=p[i];
		arr[i][1]=q[i];
	}
}

void merge_sort(long long int arr[100001][2],long long int low, long long int high) {
	if(low<high)
	{
		long long int mid =(low+high)>>1;
		merge_sort(arr,low,mid);
		merge_sort(arr,mid+1,high);
		merge(arr,low,mid,high);
	}
	else
		return;

}

